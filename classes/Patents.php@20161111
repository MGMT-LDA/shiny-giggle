<?php
	include_once("classes/Utility.php");
	include_once("classes/DbHelper.php");
	include_once("classes/Crawling.php");
	class Patents extends DbHelper
	{
		private $dbconnection;
		private $objCrawling;
		
		public $patent_id;
		public $content;
		public $pdfLink;
		public $claim;
		public $description;
		public $patentFamily;
		
		
		function __construct()
		{
			parent::__construct();
			
			$this->objCrawling	=	new Crawling();
		}
		
		public function insertPatent()
		{
			$data	=	array(
							'patent_id'=>$this->patent_id,
							'content'=>$this->content,
							'pdf_link'=>$this->pdfLink,
							'claim'=>$this->claim,
							'description'=>$this->description,
							'patent_family'=>$this->patentFamily
							);
							
			return $this->insert('patents',$data);
		}
		
		public function updatePatentClaimAndDescription()
		{
			$data	=	array(
							'patent_id'=>$this->patent_id,
							'claim'=>$this->claim,
							'description'=>$this->description
							);
							
			return $this->update('patents',$data,array('patent_id'=>$this->patent_id));
		}
		
		public function selectPatent()
		{
			$data	=	array(
							'patent_id'=>$this->patent_id
							);
							
			return $this->show('patents',$data);
		}
		
		public function crawlPatent()
		{
			if(strlen($this->patent_id) == 7 || strlen($this->patent_id) == 6)
				$url	=	'http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1='.$this->patent_id.'.PN.&OS=PN/'.$this->patent_id.'&RS=PN/'.$this->patent_id;
			else
				$url	=	'http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PG01&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.html&r=1&f=G&l=50&s1=%22'.$this->patent_id.'%22.PGNR.&OS=DN/'.$this->patent_id.'&RS=DN/'.$this->patent_id;
			
			$pageContent	=	$this->objCrawling->getSource($url);


			$posToStart		=	0;
			$flag			=	true;
			$contentArray	=	array();
			$linksArray		=	array();
			$pdfArray		=	array();
			$pdfLink		=	'';
			
			while($flag)
			{
				$content	=	$this->objCrawling->getcontent($pageContent,'<TABLE',-6,'* * * * *',11,$posToStart);
				array_push($contentArray,($content['value']));

				if(empty($content['endPos']))
					$flag	=	false;
				else
					$posToStart	=	$content['endPos'];
			}


			$flag			=	true;
			$posToStart		=	0;

			while($flag)
			{
				$content	=	$this->objCrawling->getcontent($pageContent,'<a href=',0,'>',0,$posToStart);
				array_push($linksArray,($content['value']));

				if(empty($content['endPos']))
					$flag	=	false;
				else
					$posToStart	=	$content['endPos'];
			}

			
			foreach($linksArray as $link)
			{
				$link			=	str_replace('"','',$link);
				$linkArray		=	explode(".",$link);

				if(!isset($linkArray[1]) || strtolower($linkArray[1]) != 'html')
				{
					$link			=	str_replace("PageNum=&","PageNum=0&",$link);
					$linkContent	=	$this->objCrawling->getSource(trim($link));

					if(!empty($linkContent))
					{
						$flag			=	true;
						$posToStart		=	0;

						while($flag)
						{
							$pdf	=	$this->objCrawling->getcontent($linkContent,'<embed',0,'</embed>',0,$posToStart);

							$pdfSrc	=	$this->objCrawling->getcontent($pdf['value'],'src="',0,'" ',0,0);

							$pdfSrcArray	=	explode(".",$pdfSrc['value']);

							if(!empty($pdfSrcArray) && strtolower(array_pop($pdfSrcArray)) == 'pdf')
								array_push($pdfArray,($pdfSrc['value']));

							if(empty($pdf['endPos']))
								$flag	=	false;
							else
								$posToStart	=	$pdf['endPos'];
						}
						if(!empty($pdfArray))
							$pdfLink = $pdfArray[0];
					}
				}
			}
			$contentArray	=	array_filter($contentArray);
			$content		=	$this->objCrawling->getcontent(implode(" ",$contentArray),'</TABLE>',0,'name="bottom"',0,0);
			$content['value']	=	$this->formatHtml($content['value']);
			
			return array('content'=>$content['value'], 'pdfLink'=>$pdfLink);
			if(strlen($this->patent_id) == 7)
				return array('content'=>strip_tags($content['value'],'<p><br><li><hr><div><i><center><b><table><tbody><tr><td>'), 'pdfLink'=>$pdfLink);
			else
				return array('content'=>$content['value'], 'pdfLink'=>$pdfLink);
		}
		
		public function getEspaceLink($url)
		{
			$content			=	$this->objCrawling->getSource($url);
			if(empty($content))
				$content		=	file_get_contents($url);
			
			if(!empty($content))
			{
				$anchorContent		=	$this->objCrawling->getcontent($content,'publicationLinkClass',0,'</a>',0);
				$link				=	$this->objCrawling->getcontent($anchorContent['value'],'href="',0,'">',0);
				
				return "https://worldwide.espacenet.com".$link['value'];
			}
			else
				return $url;
		}
		
		public function getClaimAndDescription($contentArray)
		{
			$result		=	$this->objCrawling->getcontent($contentArray,'id="claims"',-17,'id="description"',20,0);
			$result1	=	$this->objCrawling->getcontent($contentArray,'id="description"',-22,'xxx',0,0);
			
			return array('claim'=>$result['value'],'description'=>$result1['value']);
		}
		
		public function getPatentFamily($url)
		{
			$patentFamilies	=	array();
			$domain			=	'https://worldwide.espacenet.com';
			$link			=	'';
			$url 			=	str_replace($domain,$domain.'/data',$url);
			
			/* $content		=	$this->objCrawling->getSource($url);
			
			if(empty($content)) */
				$content	=	file_get_contents(htmlspecialchars_decode($url));
			
			if(!empty($content))
			{
				$lists		=	$this->objCrawling->getcontent($content,'epoContentNav',0,'epoAccordionContainer',0);
				
				$posToStart		=	0;
				$flag			=	true;
				$contentArray	=	array();
				
				while($flag)
				{
					$content	=	$this->objCrawling->getcontent($lists['value'],'<li>',0,'</li>',0,$posToStart);
					
					if(strpos($content['value'],'INPADOC patent family',0) !== false)
						array_push($contentArray,($content['value']));

					if(empty($content['endPos']))
						$flag	=	false;
					else
						$posToStart	=	$content['endPos'];
				}
				
				
				if(!empty($contentArray))
				{
					$link		=	$this->objCrawling->getcontent($contentArray[0],'href="',0,'">',0,0);
					$urlPatentFamilies	=	$domain.'/data'.$link['value'];
				}
				
				if(!empty($link))
				{
					/* $content		=	$this->objCrawling->getSource($urlPatentFamilies);
					
					if(empty($content)) */
						$content	=	file_get_contents(htmlspecialchars_decode($urlPatentFamilies));
					
					$patentFamilies	=	$this->extractPatentFamilies($content);
				}
			}
			
			return $patentFamilies;
		}
		
		
		function extractPatentFamilies($content)
		{
			$posToStart			=	0;
			$flag				=	true;
			$patents			=	array();
			
			while($flag)
			{
				$patentContent	=	$this->objCrawling->getcontent($content,'publicationInfoColumn',0,'</td>',0,$posToStart);
				
				if(empty($patentContent['endPos']))
					$flag	=	false;
				else
					$posToStart	=	$patentContent['endPos'];
				
				$patentContent	=	$this->objCrawling->getcontent($patentContent['value'],'</h4>',0,'globalDossier',0,0);
				
				$patentFamilyArray	=	explode("<br />",$patentContent['value']);
				$patentFamilyArray	=	array_map('trim',$patentFamilyArray);
				$patentFamilyArray	=	array_map('strip_tags',$patentFamilyArray);
				$patentFamilyArray	=	array_map('trim',$patentFamilyArray);
				
				foreach($patentFamilyArray as $item)
				{
					if($this->validateDate($item) === false)
						array_push($patents,$item);
				}
				$patents	=	array_filter($patents);
			}
			
			return $patents;
		}
		
		function validateDate($date)
		{
			return strtotime($date);
		}

		function formatHtml($html)
		{
			$html = html_entity_decode($html, ENT_COMPAT, 'UTF-8');
			$html = str_replace("&nbsp"," ",$html);
			$doc = new DOMDocument();
			@$doc->loadHTML($html);
			$html = $doc->saveHTML();
			//$html = preg_replace("/<[^>]*</", "", $html);
			//Utility::debug($html,1);
			return $html;
		}
	}
?>